%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Prealocation of structure array
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

N = 10000
b = repmat( struct('data', 0, 'name', ''), N, 1 );
% do some stuff
ctr = 1;
for ii=1:N
  newElem.data = [1 2 3];
  newElem.name = 'bla';
  b(ii) = newElem;
  ctr = ctr+1;
  if N == 1000
    break
  end
end;

% crop
b = b(1:ctr)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Plotting lines with different color and style type
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%URL: http://www.myoutsourcedbrain.com/2009/03/line-styles-in-matlab.html

%This script is for generating plots with many curves, where each curve has its own marker, color, and line style. Please see my blog post for more explanations and leave comments there.

linestyles = cellstr(char('-',':','-.','--','-',':','-.','--','-',':','-',':',...
'-.','--','-',':','-.','--','-',':','-.'));

MarkerEdgeColors=jet(n);  % n is the number of different items you have
Markers=['o','x','+','*','s','d','v','^','<','>','p','h','.',...
'+','*','o','x','^','<','h','.','>','p','s','d','v',...
'o','x','+','*','s','d','v','^','<','>','p','h','.'];

% [...]

figure
hold on
for i=1:n
  plot(X(i,:), Y(i,:),[linestyles{i} Markers(i)],'Color',MarkerEdgeColors(i,:));
end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Save plot as vector graphic 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% http://www.mathworks.com/matlabcentral/answers/1238-font-size-changes-in-figures
% If font size is not working, try to install:
% apt-get install xfonts-75dpi
% apt-get install xfonts-100dpi

x = [line1 line2 ... lineN];
y = MappingFunc(x);

imgName = 'plot';
f = figure;
plot(x,y)	
%   saveas(gcf, [imgName,'.png'], 'png');
%   saveas(gcf, [imgName,'.eps'], 'eps'); 	% eps in b&w
%   saveas(gcf, [imgName,'.pdf'], 'pdf');	% save as pdf -> problem saves also the whit margins
saveas(gcf, [imgName,'.eps'], 'eps2c'); 	% eps with colors
close(f)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Round to n places
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function roundedNumber = roundTo(number,nPlaces)
%ROUNDTO rounds a number to n places
% SYNOPSIS: roundedNumber = roundTo(number,nPlaces)
% IN: number : the number to be rounded. Can also be an array
% nPlaces: How many places to round to. E.g. 3 will round the number to the 3rd place
% OUT: roundedNumber: number rounded to nth place
%%%%%%%%%%%%%%%%%%%%%%%%%%

% check input
if nargin < 2 || isempty(nPlaces)
error('please supply two nonempty input arguments')
end

% make multiplier
mult = 10^nPlaces;

% round
roundedNumber = round(number*mult)./mult;





%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% function with dafault parameters
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
test(2, 4, 3, 'muh', {'bla', 1,})
test(2, [], 3, 'muh', {'bla', 1,})
test(2, 4, 3)
test(2, [], 3)
test(2)

function test(paramA, paramB, varargin)
  if ~exist('paramB','var') || isempty(paramB)
    paramB = 10;
  end
  
  if nargin>= 3
    paramC = varargin{1};
  else
    paramC = 5;
  end
  
  test2(paramA*paramB*paramC, varargin{:})
end



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% calling function with variable number (varargin{:})
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
VARARGIN Variable length input argument list.
Allows any number of arguments to a function.  The variable
VARARGIN is a cell array containing the optional arguments to the
function.  VARARGIN must be declared as the last input argument
and collects all the inputs from that point onwards. In the
declaration, VARARGIN must be lowercase (i.e., varargin).

For example, the function,

    function myplot(x,varargin)
    plot(x,varargin{:})

collects all the inputs starting with the second input into the 
variable "varargin".  MYPLOT uses the comma-separated list syntax
varargin{:} to pass the optional parameters to plot.  The call,

    myplot(sin(0:.1:1),'color',[.5 .7 .3],'linestyle',':')

results in varargin being a 1-by-4 cell array containing the
values 'color', [.5 .7 .3], 'linestyle', and ':'.  

function printIfDebug(debug, str, varargin)

if debug
  fprintf(str, varargin{:});
end

end
% The cell array is expanded into a comma-separated list using the {:} syntax.
% http://stackoverflow.com/a/12558820/1959528







