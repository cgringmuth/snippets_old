= A List of JavaScript Tips, Tricks and Idioms
:Author:                Christoph Hoffmann
:Email:                 choffmann1983@gmail.com
:Revision:              3.1415926
:source-highlighter:    highlight
:numbered:
:toc:                   // set table of content
:icons:                 // search for icons in :inconsdir: (default: ./images/icons.)
:iconsdir:              ../asciidoc/images/icons
:imagesdir:             ../asciidoc/images/
// :scriptsdir:            ../asciidoc/js
// :linkcss:

:language:  javascript

== Introduction

TODO

== Self executing/invoking anonymous function

[source]
--------------------------
(function () {
    alert(test)
})();
--------------------------

or

[source]
--------------------------
(function (window, document, undefined) {
    alert(test)
})(this, window); // this refers to the global object -> in global scope the window
--------------------------


== Don't use setInterval (it's bad)

.Bad example
[source]
--------------------------
setInterval(function () {
    doStuff();
}, 100);
--------------------------


.Better this way
[source]
--------------------------
(function mainloop() {          // <1>

    doStuff();

    setTimeout(mainloop, 100);  // wait until doStuff is finished

})();
--------------------------
<1> Here `mainloop` function name is important to enable recursive calling.


== Use || operator to fill in a default value. 

NOTE: The variable has to be undefined! Hence, it has to be instanceated.

[source]
--------------------------
(function (b) {
    var a = b || "default"; // ok
    // var c = q || "default"; // error!

    alert(a);
})();
--------------------------


== Object propertie retreival by . or by []

[source]
--------------------------
var test = {foo: 'bar'};

test.foo    === 'bar'   // true
test['foo'] === 'bar'   // true
--------------------------



== Attempts retrieving a value from `undefined` throws TypeError exception

[source]
--------------------------
var obj = {}, defaultName = "Default name: Christoph";

obj.person  // undefined
obj.person.name // throw "TypeError"
obj.person && obj.person.name // undefined

// ->
try { 
    var name = obj.person && obj.person.name;
    var nameStr = name || defaultName;
    alert("obj.test1.test: "+nameStr);
} catch (e) {
    alert(">>>>error thrown: "+e);
}
--------------------------


== Object always used as reference

[source]
--------------------------
var a={}, b={}, c={}; // a,b,c refer to different objects

var a = b = c = {}; // a,b,c are referring to the same object
--------------------------


== Minimize number of global variables creating one global Object which holds all content

[source]
--------------------------
var MYAPP = {};

MYAPP = {
    varname1: 'foobar',
    varname2: 200,
    doSomething: function() {
        alert(this.varname2);
    },
    print: function() {
        alert("varname1: " + this.varname1 + ", varname2:" + this.varname2);
    }
};

MYAPP.doSomething();
MYAPP.print();
--------------------------


=== Adding object to global Object literal

NOTE: Can be distributed to multiple files.

[source]
--------------------------
MYAPP.myObject = {
    value: 0,
    increment: function (inc) {
        this.value += typeof inc === 'number' ? inc : 1;
    },
    print: function () {
        alert("value: "+this.value);
    }
};

MYAPP.myObject.increment();
MYAPP.myObject.print(); // -> 1
MYAPP.myObject.increment(2);
MYAPP.myObject.print(); // -> 3
--------------------------


== Function Invocation Patter

.Problem
[source]
--------------------------
var sum = add(3,4); // this in function add() is bounded to the global space!
// Thus no inner function has access to object
--------------------------

.Workaround
[source]
--------------------------
// easy workaround save "this" in local variable which is accessible to inner function ->
MYAPP.myObject.double = function () {
    var that = this;    // workaround to provide access for inner helping function

    var helper = function () {
        // this -> refers to the global scope (often window), not to the object ("myObject")
        that.value += that.value;
    }

    helper();
}

MYAPP.myObject.double();
MYAPP.myObject.print(); // -> 6
--------------------------


== Example of traversing the DOM tree by means of a recursive function

TIP: JavaScript: The Good Parts


[source]
--------------------------
// Define a walk_the_DOM function that visits every
// node of the tree in HTML source order, starting
// from some given node. It invokes a function,
// passing it each node in turn. walk_the_DOM calls
// itself to process each of the child nodes.

var walk_the_DOM = function walk(node, func) {
    func(node);
    node = node.firstChild;
    while (node) {
        walk(node, func);
        node = node.nextSibling;
    }
};


// Define a getElementsByAttribute function. It
// takes an attribute name string and an optional
// matching value. It calls walk_the_DOM, passing it a
// function that looks for an attribute name in the
// node. The matching nodes are accumulated in a
// results array.

var getElementsByAttribute = function (att, value) {
    var results = [];

    walk_the_DOM(document.body, function (node) {
        var actual = node.nodeType === 1 && node.getAttribute(att);
        if (typeof actual === 'string' &&
                (actual === value || typeof value !== 'string')) {
            results.push(node);
        }
    });

    return results;
};
--------------------------


== String.prototype.replace: /g and /i

[TIP]
==========================
* http://tech.pro/tutorial/1453/7-javascript-basics-many-developers-aren-t-using-properly
========================== 

[source]
--------------------------
// Mistake
var str = "David is an Arsenal fan, which means David is great";
str.replace("David", "Darren"); // Only replace first occurence of David

str.replace(/David/g, "Darren"); // global replacement of David

str.replace(/david/gi, "Darren"); // global replacement which is not case sensitive
--------------------------


== Array.prototype.sort

.Normal sorting
[source]
--------------------------
[1, 3, 9, 2].sort();    // Returns: [1, 2, 3, 9]
--------------------------

.Powerful sorting
[source]
--------------------------
[
    { name: "Robin Van PurseStrings", age: 30 },
    { name: "Theo Walcott", age: 24 },
    { name: "Bacary Sagna", age: 28  }
].sort(function(obj1, obj2) {
    // Ascending: first age less than the previous
    return obj1.age - obj2.age;
});
    // Returns:  
    // [
    //    { name: "Theo Walcott", age: 24 },
    //    { name: "Bacary Sagna", age: 28  },
    //    { name: "Robin Van PurseStrings", age: 30 }
    // ]
--------------------------


== Pass-objects-by-reference (Correct deletion of array)

[source]
--------------------------
var myArray = yourArray = [1, 2, 3];

// :(
myArray = []; // "yourArray" is still [1, 2, 3]

// The right way, keeping reference
myArray.length = 0; // "yourArray" and "myArray" both []
--------------------------


== Array Merging with push

[source]
--------------------------
var mergeTo = [4,5,6],
var mergeFrom = [7,8,9];

Array.prototype.push.apply(mergeTo, mergeFrom);

mergeTo; // is: [4, 5, 6, 7, 8, 9]
--------------------------


== Efficient Feature/Object Property Detection

[source]
--------------------------
if(navigator.geolocation) {         // <1>
    // Do some stuff
}

if("geolocation" in navigator) {    // <2>
    // Do some stuff
}
--------------------------
<1> This often causes memroy leaks
<2> Better way to check property!



== Prototype 


[source]
--------------------------
var app = {};


app.test = function (a) {
    this.val = a || -1;
}

app.test.prototype = {
    val: 1,

    constructor: app.test,

    print: function () {
        alert(this.val);
    },
};

t1 = new app.test(10);
t1.print()          // <1>

t2 = new app.test();
t2.print()          // <2>
--------------------------
<1> -> 10
<2> -> -1 (Default value)


:google_io_2011_js: http://youtu.be/seX7jYI96GE[Google I/O 2011: Learning to Love JavaScript]
== Closure (Functional? Objectbase?)

[TIP]
==========================
* {google_io_2011_js}
==========================


[source]
--------------------------
function getCtr() {
    var ctr = 0;    // <1>
    return function () { alert(++ctr); }
}
--------------------------
<1> Initialization for the return function

[source]
--------------------------
var ctr = getCtr();
ctr();      // <1>
ctr();      // <2>
--------------------------
<1> -> 1
<2> -> 2


== Everything's an Object and every object is also a map

[TIP]
==========================
* {google_io_2011_js}
==========================

[source]
--------------------------
{} instanceof Object                // <1>
[] instanceof Object                // <1>
(function(){}) instanceof Object    // <1>
--------------------------
<1> -> True


== Use Closure to create modules (Data hiding)

TIP: JavaScript: The Good Parts

.serial_marker module
[source]
--------------------------
var serial_marker = function () {
    var prefix = '';
    var seq = 0;
    
    return {
        set_prefix: function (p) {
            prefix = String(p);
        },
        set_seq: function (s) {
            seq = s;
        },
        gensym: function () {
            var result = prefix + String(seq);
            seq += 1;
            return result;
        }
    };
};
--------------------------

.Example how to use it
[source]
--------------------------
var seqer = serial_marker();
seqer.set_prefix("Q");
seqer.set_seq(1000);

var uniqnumbergen = seqer.gensym;   // <1>

alert(uniqnumbergen())              // <2>
alert(uniqnumbergen())              // <3>
--------------------------
<1> -> providing `uniqnumbergen` to a third party function; `uniqnumbergen` is only the function `seqer.gensym` which prevers any changes of prefix and seq and generates valid sequneces through `uniqnumbergen`.
<2> -> Q1000
<3> -> Q1001



== .call() vs. .apply()

[TIP]
==========================
* https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fapply[.apply()]
* https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fcall[.call()]
==========================

[source]
--------------------------
function add(a, b){ 
  return a + b; 
} 
add.call(this, 1, 2) == 3       // <1>
add.apply(this, [1, 2]) == 3    // <2>
--------------------------
<1> -> `True`: .call() takes individual arguments
<2> -> `True`: .apply() takes an array of arguments



[source, python]
--------------------------
--------------------------


//////////////////////////
CommentBlock:     //////////////////////////
PassthroughBlock: ++++++++++++++++++++++++++
ListingBlock:     --------------------------
LiteralBlock:     ..........................
SidebarBlock:     **************************
QuoteBlock:       __________________________
ExampleBlock:     ==========================
OpenBlock:        --
//////////////////////////